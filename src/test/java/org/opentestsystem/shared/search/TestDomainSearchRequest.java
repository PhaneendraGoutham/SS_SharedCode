/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.search;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchFilter;
import org.opentestsystem.shared.search.domain.SearchFilter.Operator;
import org.opentestsystem.shared.search.domain.SearchFilter.SearchDataType;


/**
 * This is a psuedo-domain object, not really existing in the persistent store, but instead is used as part of the
 * Gateway interface for convey complex search criteria. Note: page counting in mongo is zero indexed.
 */

@SuppressWarnings("serial")
public class TestDomainSearchRequest extends AbstractSearchRequest {

    private static final String LONG_VAL = "longValue";
    private static final String DOUBLE_VAL = "doubleValue";
    private static final String INT_VAL = "intValue";
    private static final String DATETIME_VAL = "dateTimeValue";
    private static final String STRING_VAL = "stringValue";
    private static final String BOOLEAN_VAL = "inactive";
    private static final String OBJECT_ID = "_id";
    private static final String DYNAMIC_OBJECT = "dynamicObject.";

    private static final List<SearchFilter> SEARCH_FILTERS = Arrays
            .asList(new SearchFilter[] {
                    new SearchFilter("colorsLike", "colors", Operator.WLD_REG, SearchDataType.String),
                    new SearchFilter("colors"),

                    new SearchFilter("longValueLessThan", LONG_VAL, Operator.LTH, SearchDataType.Number),
                    new SearchFilter("longValueLessThanOrEqual", LONG_VAL, Operator.LEQ, SearchDataType.Number),
                    new SearchFilter("longValueGreaterThan", LONG_VAL, Operator.GTH, SearchDataType.Number),
                    new SearchFilter("longValueGreaterThanOrEqual", LONG_VAL, Operator.GEQ, SearchDataType.Number)

                    ,
                    new SearchFilter("doubleValue", DOUBLE_VAL, Operator.EQ, SearchDataType.Number),
                    new SearchFilter("doubleValueLessThan", DOUBLE_VAL, Operator.LTH, SearchDataType.Number),
                    new SearchFilter("doubleValueLessThanOrEqual", DOUBLE_VAL, Operator.LEQ, SearchDataType.Number),
                    new SearchFilter("doubleValueGreaterThan", DOUBLE_VAL, Operator.GTH, SearchDataType.Number),
                    new SearchFilter("doubleValueGreaterThanOrEqual", DOUBLE_VAL, Operator.GEQ, SearchDataType.Number)

                    ,
                    new SearchFilter("intValue", INT_VAL, Operator.EQ, SearchDataType.Number),
                    new SearchFilter("intValueLessThan", INT_VAL, Operator.LTH, SearchDataType.Number),
                    new SearchFilter("intValueLessThanOrEqual", INT_VAL, Operator.LEQ, SearchDataType.Number),
                    new SearchFilter("intValueGreaterThan", INT_VAL, Operator.GTH, SearchDataType.Number),
                    new SearchFilter("intValueGreaterThanOrEqual", INT_VAL, Operator.GEQ, SearchDataType.Number)

                    ,
                    new SearchFilter(DATETIME_VAL, DATETIME_VAL, Operator.EQ, SearchDataType.ISO8601Date),
                    new SearchFilter("dateTimeValueLessThan", DATETIME_VAL, Operator.LTH, SearchDataType.ISO8601Date),
                    new SearchFilter("dateTimeValueLessThanOrEqual", DATETIME_VAL, Operator.LEQ, SearchDataType.ISO8601Date),
                    new SearchFilter("dateTimeValueGreaterThan", DATETIME_VAL, Operator.GTH, SearchDataType.ISO8601Date),
                    new SearchFilter("dateTimeValueGreaterThanOrEqual", DATETIME_VAL, Operator.GEQ, SearchDataType.ISO8601Date)

                    ,
                    new SearchFilter("dateTimeValueMillis", DATETIME_VAL, Operator.EQ, SearchDataType.MilliDate),
                    new SearchFilter("dateTimeValueMillisLessThan", DATETIME_VAL, Operator.LTH, SearchDataType.MilliDate),
                    new SearchFilter("dateTimeValueMillisLessThanOrEqual", DATETIME_VAL, Operator.LEQ,SearchDataType.MilliDate),
                    new SearchFilter("dateTimeValueMillisGreaterThan", DATETIME_VAL, Operator.GTH, SearchDataType.MilliDate),
                    new SearchFilter("dateTimeValueMillisGreaterThanOrEqual", DATETIME_VAL, Operator.GEQ,SearchDataType.MilliDate)

                    ,
                    new SearchFilter(STRING_VAL, STRING_VAL, Operator.EQ, SearchDataType.String),
                    new SearchFilter("stringValueLessThan", STRING_VAL, Operator.LTH, SearchDataType.String),
                    new SearchFilter("stringValueLessThanOrEqual", STRING_VAL, Operator.LEQ, SearchDataType.String),
                    new SearchFilter("stringValueeGreaterThan", STRING_VAL, Operator.GTH, SearchDataType.String),
                    new SearchFilter("stringValueGreaterThanOrEqual", STRING_VAL, Operator.GEQ, SearchDataType.String),
                    new SearchFilter("booleanValue", BOOLEAN_VAL, Operator.EQ, SearchDataType.Boolean),
                    new SearchFilter("stringValueWildcardedRegex", STRING_VAL, Operator.WLD_REG,SearchDataType.String),
                    new SearchFilter("stringValueCaseInsensitive", STRING_VAL, Operator.CASE_INSENSITIVE, SearchDataType.String),
                    new SearchFilter("objectIdEquals", OBJECT_ID, Operator.EQ, SearchDataType.ObjectId) ,
                    new SearchFilter("dynamicElement", DYNAMIC_OBJECT, Operator.DYNAMIC_ELEMENT_NAME, SearchDataType.String) });


    private static final String SEARCH_RESOURCE = "/testDomain";

    public TestDomainSearchRequest(final Map<String, String[]> requestMap) {
        super(requestMap);
    }

    @Override
    public List<SearchFilter> getSearchFilters() {
        return SEARCH_FILTERS;
    }

    @Override
    public String getSearchResource() {
        return SEARCH_RESOURCE;
    }
}
