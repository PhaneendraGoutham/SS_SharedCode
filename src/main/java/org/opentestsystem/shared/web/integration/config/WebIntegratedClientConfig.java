/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.web.integration.config;

import java.io.IOException;
import java.net.URL;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

import org.opentestsystem.shared.web.domain.SbacWebBuildInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Spring configuration for the integrated client.
 */
@Configuration
public class WebIntegratedClientConfig {
    private static final Logger LOGGER = LoggerFactory.getLogger(WebIntegratedClientConfig.class);
    private static final SbacWebBuildInfo DEFAULT_BUILD_INFO = new SbacWebBuildInfo.Builder("0.0.1-SNAPSHOT?", "1.0?").build();

    /**
     * Creates the web build info. Checks the META-INF/MANIFEST.MF for the noteworthy build info values.
     * If the MANIFEST.MF cannot be found, a default build info object is created.
     * 
     * @return buildInfo - SbacWebBuildInfo
     */
    @Bean
    public SbacWebBuildInfo sbacWebBuildInfo() {
        final String classContainer = WebIntegratedClientConfig.class.getProtectionDomain().getCodeSource().getLocation().toString();
        LOGGER.debug("MANIFEST.MF classContainer: " + classContainer);

        final int mark = classContainer.indexOf("/WEB-INF");
        final String pathToManifest = classContainer.toString().substring(0, mark) + "/META-INF/MANIFEST.MF";
        LOGGER.debug("MANIFEST.MF path: " + pathToManifest);

        SbacWebBuildInfo buildInfo;
        try {
            final Manifest manifest = new Manifest(new URL(pathToManifest).openStream());
            final Attributes attr = manifest.getMainAttributes();

            final String appVersion = attr.getValue("Specification-Version");
            final String buildNumber = attr.getValue("Implementation-Version");
            final String buildDate = attr.getValue("Implementation-Date");
            final String buildUrl = attr.getValue("Implementation-Url");
            final String gitRevision = attr.getValue("Implementation-Identifier");
            final String manifestVersion = attr.getValue("Manifest-Version");

            buildInfo = new SbacWebBuildInfo.Builder(appVersion, manifestVersion)
                    .jenkinsBuildNumber(buildNumber)
                    .jenkinsBuildDate(buildDate)
                    .jenkinsBuildUrl(buildUrl)
                    .gitRevision(gitRevision)
                    .build();
        } catch (final IOException e) {
            // if manifest not found (local), use default build info
            LOGGER.debug("Unable to load MANIFEST.MF", e);
            buildInfo = DEFAULT_BUILD_INFO;
        }
        return buildInfo;
    }

}
