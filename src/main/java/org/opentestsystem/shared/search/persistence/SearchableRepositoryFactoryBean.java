/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.search.persistence;

import java.io.Serializable;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.query.MongoEntityInformation;
import org.springframework.data.mongodb.repository.support.MongoRepositoryFactory;
import org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean;
import org.springframework.data.repository.core.RepositoryMetadata;
import org.springframework.data.repository.core.support.RepositoryFactorySupport;

public class SearchableRepositoryFactoryBean<R extends MongoRepository<T, ID>, T, ID extends Serializable> extends MongoRepositoryFactoryBean<R, T, ID> {

    @Override
    protected RepositoryFactorySupport getFactoryInstance(final MongoOperations operations) {
        return new SearchableRepositoryFactory<T, ID>(operations);
    }

    private static class SearchableRepositoryFactory<T, ID extends Serializable> extends MongoRepositoryFactory {
        private MongoOperations operations;

        public SearchableRepositoryFactory(final MongoOperations inOperations) {
            super(inOperations);
            this.operations = inOperations;
        }

        protected Object getTargetRepository(final RepositoryMetadata metadata) {
            @SuppressWarnings("unchecked")
            MongoEntityInformation<T, ID> entityInformation = this.getEntityInformation((Class<T>) metadata.getDomainType());
            return new SearchableRepositoryImpl<T, ID>(entityInformation, operations);
        }

        protected Class<?> getRepositoryBaseClass(final RepositoryMetadata metadata) {
            return SearchableRepository.class;
        }
    }

}
