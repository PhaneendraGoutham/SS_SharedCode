/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.search.domain;

import java.io.Serializable;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

import org.apache.commons.lang.StringUtils;
import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.opentestsystem.shared.exception.RestException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Defines a search filter
 */
public class SearchFilter implements Serializable {

    private static final long serialVersionUID = -499064615417512794L;

    private static final Logger LOGGER = LoggerFactory.getLogger(SearchFilter.class);

    public static final String ISO_DATE_FORMAT = "";
    private static final int SB_INIT_SIZE = 35;

    private final String searchApiName;
    private final String domainName;
    private final Operator operator;
    private final SearchDataType dataType;

    public SearchFilter(final String attrName) {
        this(attrName, attrName, Operator.EQ, SearchDataType.String);
    }

    public SearchFilter(final String attrName, final Operator inOperator) {
        this(attrName, attrName, inOperator, SearchDataType.String);
    }

    public SearchFilter(final String attrName, final Operator inOperator, final SearchDataType inDataType) {
        this(attrName, attrName, inOperator, inDataType);
    }

    public SearchFilter(final String inSearchApiName, final String inDomainName, final Operator inOperator, final SearchDataType inDataType) {
        super();
        this.searchApiName = inSearchApiName;
        this.domainName = inDomainName;
        this.operator = inOperator;
        this.dataType = inDataType;
    }

    /**
     * Enumeration of the valid operators
     */
    public enum Operator {
        GTH, LTH, GEQ, LEQ, EQ, WLD_REG, NOTNULL, DYNAMIC_ELEMENT_NAME
    }

    /**
     * Enumeration of the different data types we can search on
     */
    public enum SearchDataType {
        String, Number, MilliDate, ISO8601Date, ObjectId, Boolean
    }

    public String getSearchApiName() {
        return searchApiName;
    }

    public String getDomainName() {
        return domainName;
    }

    public Operator getOperator() {
        return operator;
    }

    public SearchDataType getDataType() {
        return dataType;
    }

    /**
     * Get the values to be searched on
     * 
     * @param strings
     * @return
     */
    public Object[] getSearchValue(final String... strings) {
        Object[] vals = new Object[strings.length];
        int index = 0;
        NumberFormat format = NumberFormat.getInstance(Locale.US);
        for (String value : strings) {
            if (StringUtils.isNotEmpty(value)) {
                try {
                    Object val = null;
                    StringBuffer debugMsg = new StringBuffer("creating search value ");
                    switch (this.dataType) {
                    case Number:
                        val = format.parse(value);
                        debugMsg.append(value).append(" as number ").append(val);
                        break;
                    case MilliDate:
                        val = new DateTime(format.parse(value).longValue());
                        debugMsg.append(value).append(" as date from millis ").append(val);
                        break;
                    case ISO8601Date:
                        val = DateTime.parse(value);
                        debugMsg.append(value).append(" as date from ISO-8601 String ").append(val);
                        break;
                    case Boolean:
                        val = Boolean.parseBoolean(value);
                        debugMsg.append(value).append(" as boolean ").append(val);
                        break;
                    case ObjectId:
                        val = new ObjectId(value);
                        debugMsg.append(value).append(" as Object ID from String ").append(val);
                        break;
                    default:
                        val = value;
                        debugMsg = new StringBuffer(SB_INIT_SIZE);
                        debugMsg.append("keeping search value ");
                        debugMsg.append(value);
                        debugMsg.append(" as string");
                        break;
                    }
                    vals[index] = val;
                    LOGGER.debug(debugMsg.toString());
                } catch (ParseException e) {
                    throw new RestException("search.criteria.invalid.format", e);
                }
                LOGGER.debug("");
            }
            index++;
        }
        return vals;
    }

    @Override
    public String toString() {
        return "SearchApiName: '" + searchApiName + "' |domainName: '" + domainName + "' |operator: '" + operator + "' |dataType: '" + dataType +"'";
    }

}
