/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.search.domain;

import java.io.IOException;
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Joiner;

/**
 * The response that is returned when using the paged search UI
 * 
 * @param <D>
 */
@XmlRootElement
public class SearchResponse<D> implements Serializable {

    private static final long serialVersionUID = -8479916141589554052L;

    private static final Logger LOGGER = LoggerFactory.getLogger(SearchResponse.class);

    private List<D> searchResults;
    private int currentPage;
    private int returnCount;
    private int pageSize;
    private long totalCount;
    private String sortKey;
    private String sortDirection;
    private String nextPageUrl;
    private String prevPageUrl;
    private String searchResource = "";

    @XmlTransient
    @JsonIgnore
    private Map<String, String[]> originalSearchRequest;

    public SearchResponse() {
        // empty
    }

    public SearchResponse(final List<D> inSearchResults, final AbstractSearchRequest inOriginalSearchRequest, final long inTotalCount) {
        this.searchResults = inSearchResults;
        this.totalCount = inTotalCount;
        this.currentPage = inOriginalSearchRequest.getCurrentPage();
        this.returnCount = searchResults.size();
        this.pageSize = inOriginalSearchRequest.getPageSize();
        this.sortKey = Joiner.on(", ").skipNulls().join(inOriginalSearchRequest.getSortKeys());
        this.sortDirection = Joiner.on(", ").skipNulls().join(inOriginalSearchRequest.getSortDirections());
        this.originalSearchRequest = inOriginalSearchRequest.getSearchCriteria();
        this.nextPageUrl = buildNextPageUrl();
        this.prevPageUrl = buildPrevPageUrl();
        this.searchResource = inOriginalSearchRequest.getSearchResource();
    }

    public List<D> getSearchResults() {
        return searchResults;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public int getReturnCount() {
        return returnCount;
    }

    public int getPageSize() {
        return pageSize;
    }

    public String getSortKey() {
        return sortKey;
    }

    public String getSortDirection() {
        return sortDirection;
    }

    public String getNextPageUrl() {
        return nextPageUrl;
    }

    public String getPrevPageUrl() {
        return prevPageUrl;
    }

    public long getTotalCount() {
        return totalCount;
    }

    private String buildUrl() {
        StringBuilder sbuilder = new StringBuilder(this.searchResource).append('?');
        for (String key : originalSearchRequest.keySet()) {
            for (String value : originalSearchRequest.get(key)) {
                sbuilder.append(key).append('=').append(value).append('&');
            }
        }
        sbuilder.append(AbstractSearchRequest.PAGE_SIZE).append('=').append(pageSize).append('&');
        // TODO: We could also append the sortKey and sortDir to this if we want.
        return sbuilder.toString();
    }

    private String buildNextPageUrl() {
        return (this.totalCount <= (this.pageSize * (this.currentPage +1))) ? null : buildUrl() + AbstractSearchRequest.CURRENT_PAGE + "=" + (currentPage + 1);
    }

    private String buildPrevPageUrl() {
        return (this.currentPage < 1) ? null : buildUrl() + AbstractSearchRequest.CURRENT_PAGE + "=" + (currentPage - 1);
    }

    @Override
    public String toString() {
        String returnString = "SearchResponse: ";
        try {
            returnString += new ObjectMapper().writeValueAsString(this);
        } catch (IOException e) {
            LOGGER.error("Could not turn this object into JSON", e);
        }
        return returnString;
    }
}
